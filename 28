# 实现strstr()
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        a=len(needle)
        b=len(haystack)
        if a==0:
            return 0
        next=self.getnext(a,needle)
        p=-1
        for j in range(b):
            while p>=0 and needle[p+1]!=haystack[j]:
                p=next[p]
            if needle[p+1]==haystack[j]:
                p+=1
            if p==a-1:
                return j-a+1
        return -1

    def getnext(self,a,needle):
        next=['' for i in range(a)]
        k=-1
        next[0]=k
        for i in range(1,len(needle)):
            while (k>-1 and needle[k+1]!=needle[i]):
                k=next[k]
            if needle[k+1]==needle[i]:
                k+=1
            next[i]=k
        return next
        
# 出现了 TypeError: '>=' not supported between instances of 'str' and 'int' 的问题，但是我不是很明白为什么
# 会出现这种问题。


class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        # m,n = len(haystack),len(needle)
        # for i in range(m):
        #     if haystack[i:i+n] == needle:
        #         return i
        # return -1     # 暴力解法
        a = len(needle)
        b = len(haystack)
        if a == 0: 
            return 0
        j = -1
        next =self.getnext(a,needle)
        for i in range(b):
            while j >= 0 and needle[j+1] != haystack[i]:
                j = next[j]
            if needle[j+1] == haystack[i]:
                j += 1
            if j == a-1:
                return i-a+1
        return -1



    def getnext(self,a,needle):
        next = ['' for i in range(a)]   # 这一步我不是很明白，说实话，能大概理解在做什么。生成一个空的字符串
        j = -1
        next[0] = j
        for i in range(1,len(needle)):
            while j>= 0 and needle[j+1] != needle[i]:
                j = next[j]
            if needle[j+1] == needle[i]:
                j += 1
            next[i] = j
        return next
        
# 现在明白了，j = next[j] 写成了 j = needle[j]了，看似是粗心，实际上是对于KMP算法理解程度不够，
